멀티 스레드 프로그램에서 발생하는 문제
race condition
deadlock


Async io == 윈도우에선 오버랩드 io
=> 여러가지 방법이 있었음:
Windows API 기준.

handle = CreateFile(,"특별한 플래그")
ReadFile
WriteFile

특별한 플래그를 넣으면 asynchronous operation 을 취한다.

1. handle (kernel object signaled?)
2. event-object
3. asynchronous Procedure Call (APC)

APC: ReadFileEx(~~~, 함수포인터)
파일을 읽고 함수포인터가 가리키는 함수를 실행한다.(OS가 실행 / 콜백)
WaitForSingleObjectEx 를 사용




IO 부분이 항상 병목이 되기때문에, 리스펀스 타임을 줄이기 위해서 하는 작업.

====

IO Completion Port(IOCP) = kernel object

메모리 공간에서 0~2^(32-1) 까지는 user space 이고, 그 이후부터 끝까지는 kernel space 이다.
kernel space 에서는 하드웨어 에 직접적으로 접근이 가능하다.
IOCP 도 역시 kernel object 이기때문에 kernel space 에 있다.

IOCP 는 큐를 가지고 있다. 대충 느낌은, 'IO가 끝나면(complete) 무언가 패킷을 큐에 집어넣는다.'.

그러면 user space 에서 여러개의 동일한 스레드가 존재하고,
1. Check IOCP = IOCP 큐에서 꺼내서 있다면
2. Work = 처리하고
3. IO Request = 받아라! 받을준비해라! 사용자가 요청할때까지 기다려라!
를 수행한다.


i. IOCP하나가 여러 파일을 처리한다.
여러 핸들러에서 보낸 패킷을 누가 보냈는지 파악하는 메카니즘이 있음. key structure. (아직 제대로 설명안함)

thread 는 대충 2*core + 2 개 정도 만드는것을 권장.

